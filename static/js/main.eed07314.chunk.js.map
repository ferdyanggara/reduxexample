{"version":3,"sources":["components/Posts.js","actions/postActions.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postItems","map","post","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPost","postData","method","headers","JSON","stringify","initialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","Postform","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eed07314.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport {fetchPosts} from \"../actions/postActions\";\r\n\r\nclass Posts extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        if (nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    const postItems = this.props.posts.map(post => (\r\n        <div key={post.id}>\r\n            <h3>{post.title}</h3>\r\n            <p>{post.body}</p>\r\n        </div>\r\n    ));\r\n\r\n        return (\r\n            <div>\r\n                <h1>\r\n                    Posts\r\n                </h1>\r\n                {postItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    fetchPosts: PropTypes.func.isRequired,\r\n    posts: PropTypes.array.isRequired,\r\n    newPost: PropTypes.object\r\n};\r\n    \r\n\r\nconst mapStateToProps = state => ({\r\n   posts: state.posts.items,\r\n   newPost: state.posts.item\r\n});\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts);","import { FETCH_POSTS, NEW_POST } from './types';\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts =>\r\n            dispatch({\r\n                type: FETCH_POSTS,\r\n                payload: posts\r\n            })\r\n        );\r\n};\r\n\r\nexport const createPost = postData => dispatch => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(post =>\r\n            dispatch({\r\n                type: NEW_POST,\r\n                payload: post\r\n            })\r\n        );\r\n};","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { createPost } from '../actions/postActions';\r\n\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n\r\n        this.props.createPost(post);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Add Post</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label>Title: </label>\r\n                        <br />\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"title\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.title}\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <div>\r\n                        <label>Body: </label>\r\n                        <br />\r\n                        <textarea\r\n                            name=\"body\"\r\n                            onChange={this.onChange}\r\n                            value={this.state.body}\r\n                        />\r\n                    </div>\r\n                    <br />\r\n                    <button type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    createPost: PropTypes.func.isRequired\r\n};\r\n\r\nexport default connect(null, { createPost })(PostForm);","import { FETCH_POSTS, NEW_POST } from '../actions/types';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case NEW_POST:\r\n            return {\r\n                ...state,\r\n                item: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport postReducer from \"./postReducer\";\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n});","import { createStore, applyMiddleware, compose} from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer, \r\n    initialState, \r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n        )\r\n);\r\n\r\n    \r\n\r\nexport default store;","import React, { Component } from 'react';\nimport Posts from \"./components/Posts\";\nimport \"./App.css\";\nimport Postform from \"./components/Postform\";\n\n// redux\nimport {Provider} from \"react-redux\";\n\nimport store from \"./store\";\n\nclass App extends Component {\n  render(){\n    return (\n      <Provider store={store}>\n      <div className=\"App\">\n       \n        <Postform/>\n      <hr/>\n        <Posts />\n      </div>\n      </Provider>\n    );\n  }\n  }\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}